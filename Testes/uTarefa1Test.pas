unit uTarefa1Test;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.Variants, FireDAC.Stan.Error, Data.DB, uspQuery,
  FireDAC.Stan.Intf, Winapi.Windows, Vcl.Dialogs, FireDAC.Stan.Async, FireDAC.DatS,
  Vcl.Forms, FireDAC.Comp.DataSet, FireDAC.Stan.Param, FireDAC.Comp.Client,
  Vcl.Controls, FireDAC.Stan.Option, System.Classes, System.SysUtils, Winapi.Messages,
  FireDAC.DApt.Intf, Vcl.Graphics, FireDAC.DApt, Vcl.StdCtrls, Vcl.Buttons, ufTarefa1,
  FireDAC.Phys.Intf,DUnitX.TestFramework;

type
  // Test methods for class TfTarefa1
  [TestFixture]

  TestTfTarefa1 = class(TTestCase)
  strict private
    FfTarefa1: TfTarefa1;
  public
    [Test]
    procedure TestMontaSql;

  end;

implementation

procedure TestTfTarefa1.TestMontaSql;
var
  ReturnValue: string;
  Condicoes: TMemo;
  Tabelas: TMemo;
  Colunas: TMemo;
  ResultadoEsperado: String;
begin
  // TODO: Setup method call parameters
  FfTarefa1 := TfTarefa1.Create(nil);
  try
    Condicoes.Lines.Strings[0] := 'Condicao = 1';
    Tabelas.Lines.Strings[0] := 'Tabela';
    Colunas.Lines.Strings[0] := 'Coluna';
    ReturnValue := FfTarefa1.MontaSql(Colunas, Tabelas, Condicoes);

    ResultadoEsperado := 'Select Coluna From Tabela Where Condicao = 1';

    CheckEqualsString(ResultadoEsperado, ReturnValue, 'Funçao MontarSql Falhou');
  finally
    FreeAndNil(FfTarefa1);
  end;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  TDUnitX.RegisterTestFixture(TestTfTarefa1);
end.

